// Completely new implementation
  Future<void> _preFundWithGas(String walletAddress) async {
    if (kDebugMode) {
      print('üîç STEP 1: Starting gas pre-funding process');
      print('üîç Network mode: ${dotenv.env['NETWORK_MODE']}');
    }
    
    if (dotenv.env['NETWORK_MODE'] != 'local') {
      if (kDebugMode) {
        print('‚ùå Gas pre-funding aborted: Not in local mode');
      }
      throw Exception('Gas pre-funding only available in local development mode');
    }
    
    try {
      // Primary method: Direct JSON-RPC call
      if (kDebugMode) {
        print('üîç STEP 2: Using direct JSON-RPC method for pre-funding');
        print('üí∞ Pre-funding wallet $walletAddress with gas...');
      }
      
      // Use a raw HTTP request to the Ethereum node
      final http.Client httpClient = http.Client();
      final rpcUrl = dotenv.env['LOCAL_RPC_URL'] ?? 'http://127.0.0.1:8545';
      
      // Format transaction parameters for JSON-RPC
      final body = jsonEncode({
        "jsonrpc": "2.0",
        "method": "eth_sendTransaction",
        "params": [
          {
            "from": "0x90F8bf6A479f320ead074411a4B0e7944Ea8c9C1", // Ganache account 0
            "to": walletAddress,
            "value": "0x${BigInt.from(0.1 * 1e18).toRadixString(16)}", // 0.1 ETH in hex
            "gas": "0x5208", // 21000 gas in hex
            "gasPrice": "0x4A817C800" // 20 Gwei in hex
          }
        ],
        "id": 1
      });
      
      if (kDebugMode) {
        print('üîç STEP 3: Sending JSON-RPC request');
        print('   HTTP Request to: $rpcUrl');
        print('   Request body: $body');
      }
      
      final response = await httpClient.post(
        Uri.parse(rpcUrl),
        headers: {'Content-Type': 'application/json'},
        body: body,
      );
      
      if (kDebugMode) {
        print('üîç STEP 4: Received response');
        print('   Response status: ${response.statusCode}');
        print('   Response body: ${response.body}');
      }
      
      final result = jsonDecode(response.body);
      
      // Check for error in response
      if (result['error'] != null) {
        throw Exception('Pre-funding failed: ${result['error']['message']}');
      }
      
      if (kDebugMode) {
        print('üîç STEP 5: Transaction completed');
        print('‚õΩ Pre-funded new wallet with 0.1 ETH for gas! TX: ${result['result']}');
      }
      
      httpClient.close();
      
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Gas pre-funding failed');
        print('üí• Gas pre-funding error details: $e');
        print('üí• Error type: ${e.runtimeType}');
        
        // Try to diagnose common issues
        if (e.toString().contains("connection")) {
          print('   ‚ö†Ô∏è Connection error - check if Ganache is running');
        } else if (e.toString().contains("funds")) {
          print('   ‚ö†Ô∏è Insufficient funds - account 0 doesn\'t have enough ETH');
        }
        
        // Try web3dart method as fallback
        print('   üîÑ Attempting fallback web3dart method...');
        try {
          await _tryWeb3DartPrefunding(walletAddress);
          if (kDebugMode) {
            print('‚úÖ Gas pre-funding succeeded with web3dart fallback method!');
          }
          return; // Success with fallback method, return early
        } catch (fallbackError) {
          if (kDebugMode) {
            print('‚ùå Fallback pre-funding also failed: $fallbackError');
          }
          // Continue to throw the original exception
        }
      }
      throw Exception('Failed to pre-fund wallet with gas: $e');
    }
  }